use std::collections::HashMap;
use std::iter::Iterator;
use std::vec::IntoIter;
use serde::{Deserialize, Serialize};

use crate::models::FetchedTranscriptSnippet;

/// A complete transcript with all the snippets and metadata
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FetchedTranscript {
    /// The list of transcript snippets
    pub snippets: Vec<FetchedTranscriptSnippet>,

    /// Video ID
    pub video_id: String,

    /// Human-readable language name
    pub language: String,

    /// Language code (e.g., "en", "fr")
    pub language_code: String,

    /// Whether this transcript was automatically generated by YouTube
    pub is_generated: bool,
}

impl FetchedTranscript {
    /// Convert to raw data format (for serialization)
    pub fn to_raw_data(&self) -> Vec<HashMap<String, serde_json::Value>> {
        self.snippets
            .iter()
            .map(|snippet| {
                let mut map = HashMap::new();
                map.insert(
                    "text".to_string(),
                    serde_json::Value::String(snippet.text.clone()),
                );
                map.insert(
                    "start".to_string(),
                    serde_json::Value::Number(serde_json::Number::from_f64(snippet.start).unwrap()),
                );
                map.insert(
                    "duration".to_string(),
                    serde_json::Value::Number(
                        serde_json::Number::from_f64(snippet.duration).unwrap(),
                    ),
                );
                map
            })
            .collect()
    }
}

impl IntoIterator for FetchedTranscript {
    type Item = FetchedTranscriptSnippet;
    type IntoIter = IntoIter<Self::Item>;

    fn into_iter(self) -> Self::IntoIter {
        self.snippets.into_iter()
    }
}

impl<'a> IntoIterator for &'a FetchedTranscript {
    type Item = &'a FetchedTranscriptSnippet;
    type IntoIter = std::slice::Iter<'a, FetchedTranscriptSnippet>;

    fn into_iter(self) -> Self::IntoIter {
        self.snippets.iter()
    }
} 